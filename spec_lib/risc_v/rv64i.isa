; RISC-V RV64I Base Integer Instruction Set, Version 2.1, and associated pseudo-instructions
;
; Based on:
;
; - RISC-V Unprivileged ISA, Version 20240411
;   https://github.com/riscv/riscv-isa-manual/releases/tag/20240411
;
; - RISC-V Assembly Programmer's Manual
;   https://github.com/riscv-non-isa/riscv-asm-manual/blob/ad0de8c004e29c9a7ac33cfd054f4d4f9392f2fb/src/asm-manual.adoc

[settings]
endianness = big  // To match standard assembler output

[fields]
register
x0   00000
zero 00000
x1   00001
ra   00001
x2   00010
sp   00010
x3   00011
gp   00011
x4   00100
tp   00100
x5   00101
t0   00101
x6   00110
t1   00110
x7   00111
t2   00111
x8   01000
s0   01000
fp   01000
x9   01001
s1   01001
x10  01010
a0   01010
x11  01011
a1   01011
x12  01100
a2   01100
x13  01101
a3   01101
x14  01110
a4   01110
x15  01111
a5   01111
x16  10000
a6   10000
x17  10001
a7   10001
x18  10010
s2   10010
x19  10011
s3   10011
x20  10100
s4   10100
x21  10101
s5   10101
x22  10110
s6   10110
x23  10111
s7   10111
x24  11000
s8   11000
x25  11001
s9   11001
x26  11010
s10  11010
x27  11011
s11  11011
x28  11100
t3   11100
x29  11101
t4   11101
x30  11110
t5   11110
x31  11111
t6   11111

branch_funct3
eq  000
ge  101
geu 111
lt  100
ltu 110
ne  001

branch_z_funct3
eqz 000
gez 101
ltz 100
nez 001

branch_opposite_funct3
gt  100
gtu 110
le  101
leu 111

branch_opposite_z_funct3
gtz 100
lez 101

fence_set
i    1000
o    0100
r    0010
w    0001
io   1100
ir   1010
iw   1001
or   0110
ow   0101
rw   0011
ior  1110
iow  1101
irw  1011
orw  0111
iorw 1111

load_funct3
b  000
bu 100
d  011
h  001
hu 101
w  010
wu 110

op_funct7_funct3
add  0000000000
and  0000000111
or   0000000110
sll  0000000001
slt  0000000010
sltu 0000000011
sra  0100000101
srl  0000000101
sub  0100000000
xor  0000000100

op_32_funct7_funct3
addw 0000000000
sllw 0000000001
sraw 0100000101
srlw 0000000101
subw 0100000000

op_imm_funct3
addi  000
andi  111
ori   110
slti  010
sltiu 011
xori  100

op_imm_32_funct3
addiw 000

op_imm_shift_funct6_funct3
slli 000000001
srai 010000101
srli 000000101

op_imm_32_shift_funct7_funct3
slliw 0000000001
sraiw 0100000101
srliw 0000000101

store_funct3
b 000
d 011
h 001
w 010

[instructions]
auipc  %rd(register) , %imm:S64(immediate)
%imm[19:0] %rd[4:0] 0010111

b%op(branch_funct3)  %src1(register) , %src2(register) , %label(label)
%label_pcrel:S13 = %label - $start
%label_pcrel[12:12] %label_pcrel[10:5] %src2[4:0] %src1[4:0] %op[2:0] %label_pcrel[4:1] %label_pcrel[11:11] 1100011
beq/bge/bgeu/blt/bltu/bne %src1, %src2, %label

b%op(branch_z_funct3)  %src(register) , %label(label)
%label_pcrel:S13 = %label - $start
%label_pcrel[12:12] %label_pcrel[10:5] 00000 %src[4:0] %op[2:0] %label_pcrel[4:1] %label_pcrel[11:11] 1100011
beqz/bgez/bltz/bnez %src, %label -> beq/bge/blt/bne %src, zero, %label

b%op(branch_opposite_funct3)  %src1(register) , %src2(register) , %label(label)
%label_pcrel:S13 = %label - $start
%label_pcrel[12:12] %label_pcrel[10:5] %src1[4:0] %src2[4:0] %op[2:0] %label_pcrel[4:1] %label_pcrel[11:11] 1100011
bgt/bgtu/ble/bleu %src1, %src2, %label -> blt/bltu/bge/bgeu %src2, %src1, %label

b%op(branch_opposite_z_funct3)  %src(register) , %label(label)
%label_pcrel:S13 = %label - $start
%label_pcrel[12:12] %label_pcrel[10:5] %src[4:0] 00000 %op[2:0] %label_pcrel[4:1] %label_pcrel[11:11] 1100011
bgtz/blez %src, %label -> blt/bge zero, %src, %label

call  %label(label)
%label_pcrel:S32 = %label - $start
%label_pcrel_hi:S20 = (%label_pcrel[31:12] + %label_pcrel[11:11]) & ((1 << 20) - 1)
%label_pcrel_lo:S12 = %label_pcrel[11:0]
%label_pcrel_hi[19:0] 00001 0010111 %label_pcrel_lo[11:0] 00001 000 00001 1100111
auipc ra, pcrel_hi(%label); jalr ra, pcrel_lo(%label)(ra)

call  %dest(register) , %label(label)
%label_pcrel:S32 = %label - $start
%label_pcrel_hi:S20 = (%label_pcrel[31:12] + %label_pcrel[11:11]) & ((1 << 20) - 1)
%label_pcrel_lo:S12 = %label_pcrel[11:0]
%label_pcrel_hi[19:0] %dest[4:0] 0010111 %label_pcrel_lo[11:0] %dest[4:0] 000 %dest[4:0] 1100111
auipc ra, pcrel_hi(%a); jalr ra, pcrel_lo(%a)(ra)

ebreak
000000000001 00000 000 00000 1110011

ecall
000000000000 00000 000 00000 1110011

fence  %predecessor_set(fence_set) , %successor_set(fence_set)
0000 %predecessor_set[3:0] %successor_set[3:0] 00000 000 00000 0001111

fence  0 , %successor_set(fence_set)
0000 0000 %successor_set[3:0] 00000 000 00000 0001111

fence  %predecessor_set(fence_set) , 0
0000 %predecessor_set[3:0] 0000 00000 000 00000 0001111

fence  0 , 0
0000 0000 0000 00000 000 00000 0001111

fence
0000 0011 0011 00000 000 00000 0001111
fence rw, rw

fence.tso
1000 0011 0011 00000 000 00000 0001111

j  %label(label)
%label_pcrel:S21 = %label - $start
%label_pcrel[20:20] %label_pcrel[10:1] %label_pcrel[11:11] %label_pcrel[19:12] 00000 1101111
jal zero, %label

jal  %label(label)
%label_pcrel:S21 = %label - $start
%label_pcrel[20:20] %label_pcrel[10:1] %label_pcrel[11:11] %label_pcrel[19:12] 00001 1101111
jal ra, %a

jal  %dest(register) , %label(label)
%label_pcrel:S21 = %label - $start
%label_pcrel[20:20] %label_pcrel[10:1] %label_pcrel[11:11] %label_pcrel[19:12] %dest[4:0] 1101111

jalr  ( %base(register) )
000000000000 %base[4:0] 000 00001 1100111
jalr ra, 0(%base)

jalr  %offset:S64(immediate) ( %base(register) )
%offset[11:0] %base[4:0] 000 00001 1100111
jalr ra, %offset(%base)

jalr  %dest(register) , %base(register)
000000000000 %base[4:0] 000 %dest[4:0] 1100111
jalr %dest, 0(%base)

jalr  %dest(register) , ( %base(register) )
000000000000 %base[4:0] 000 %dest[4:0] 1100111
jalr %dest, 0(%base)

jalr  %dest(register) , %offset:S64(immediate) ( %base(register) )
%offset[11:0] %base[4:0] 000 %dest[4:0] 1100111

jalr  %base(register)
000000000000 %base[4:0] 000 00001 1100111
jalr ra, 0(%base)

jr  %base(register)
000000000000 %base[4:0] 000 00000 1100111
jalr zero, 0(%base)

jump  %label(label) , %scratch(register)
%label_pcrel:S32 = %label - $start
%label_pcrel_hi:S20 = (%label_pcrel[31:12] + %label_pcrel[11:11]) & ((1 << 20) - 1)
%label_pcrel_lo:S12 = %label_pcrel[11:0]
%label_pcrel_hi[19:0] %scratch[4:0] 0010111 %label_pcrel_lo[11:0] %scratch[4:0] 000 00000 1100111
auipc %scratch, pcrel_hi(%label); jalr zero, pcrel_lo(%label)(%scratch)

li  %dest(register) , %imm:S64(immediate)
%imm[11:0] 00000 000 %dest[4:0] 0010011
addi %dest, zero, %imm

li  %dest(register) , %imm:S64(immediate)
%imm[31:12] %dest[4:0] 0110111
lui %dest, %imm

li  %dest(register) , %imm:S64(immediate)
%imm_lui:S20 = (%imm[31:12] + %imm[11:11]) & ((1 << 20) - 1)
%imm_addi:S12 = %imm[11:0]
%imm_lui[19:0] %dest[4:0] 0110111 %imm_addi[11:0] %dest[4:0] 000 %dest[4:0] 0010011
lui %dest, %hi(%imm); addi %dest, %lo(%imm)

lla  %dest(register) , %label(label)
%label_pcrel:S32 = %label - $start
%label_pcrel_hi:S20 = (%label_pcrel[31:12] + %label_pcrel[11:11]) & ((1 << 20) - 1)
%label_pcrel_lo:S12 = %label_pcrel[11:0]
%label_pcrel_hi[19:0] %dest[4:0] 0010111 %label_pcrel_lo[11:0] %dest[4:0] 000 %dest[4:0] 0010011
auipc %dest, pcrel_hi(%label); addi %dest, %dest, pcrel_lo(%label)

lui  %dest(register) , %imm:S64(immediate)
%imm[19:0] %dest[4:0] 0110111
lui %dest, %imm

l%width(load_funct3)  %dest(register) , %label(label)
%label_pcrel:S32 = %label - $start
%label_pcrel_hi:S20 = (%label_pcrel[31:12] + %label_pcrel[11:11]) & ((1 << 20) - 1)
%label_pcrel_lo:S12 = %label_pcrel[11:0]
%label_pcrel_hi[19:0] %dest[4:0] 0010111 %label_pcrel_lo[11:0] %dest[4:0] %width[2:0] %dest[4:0] 0000011
auipc %dest, pcrel_hi(%label); lb/lbu/ld/lh/lhu/lw/lwu %dest, pcrel_lo(%label)(%dest)

l%width(load_funct3)  %dest(register) , %offset:S64(immediate) ( %base(register) )
%offset[11:0] %base[4:0] %width[2:0] %dest[4:0] 0000011
lb/lbu/ld/lh/lhu/lw/lwu %dest, %offset(%base)

mv  %dest(register) , %src(register)
000000000000 %src[4:0] 000 %dest[4:0] 0010011
addi %dest, %src, 0

neg  %dest(register) , %src(register)
0100000 %src[4:0] 00000 000 %dest[4:0] 0110011
sub %dest, zero, %src

negw  %dest(register) , %src(register)
0100000 %src[4:0] 00000 000 %dest[4:0] 0111011
subw %dest, zero, %src

nop
000000000000 00000 000 00000 0010011
addi zero, zero, 0

not  %dest(register) , %src(register)
111111111111 %src[4:0] 100 %dest[4:0] 0010011
xori %dest, %src, -1

ntl.all
0000000 00101 00000 000 00000 0110011
add x0, x0, x5

ntl.p1
0000000 00010 00000 000 00000 0110011
add x0, x0, x2

ntl.pall
0000000 00011 00000 000 00000 0110011
add x0, x0, x3

ntl.s1
0000000 00100 00000 000 00000 0110011
add x0, x0, x4

pause
0000 0001 0000 00000 000 00000 0001111
fence w, 0

ret
000000000000 00001 000 00000 1100111
jalr zero, 0(ra)

seqz  %dest(register) , %src(register)
000000000001 %src[4:0] 011 %dest[4:0] 0010011
sltiu %dest, %src, 1

sext.b  %dest(register) , %src(register)
000000 111000 %src[4:0] 001 %dest[4:0] 0010011 010000 111000 %dest[4:0] 101 %dest[4:0] 0010011
slli %dest, %src, (64 - 8); srai %dest, %dest, (64 - 8)

sext.h  %dest(register) , %src(register)
000000 110000 %src[4:0] 001 %dest[4:0] 0010011 010000 110000 %dest[4:0] 101 %dest[4:0] 0010011
slli %dest, %src, (64 - 16); srai %dest, %dest, (64 - 16)

sext.w  %dest(register) , %src(register)
000000000000 %src[4:0] 000 %dest[4:0] 0011011
addiw %dest, %src, 0

sgtz  %dest(register) , %src(register)
0000000 %src[4:0] 00000 010 %dest[4:0] 0110011
slt %dest, zero, %src

sltz  %dest(register) , %src(register)
0000000 00000 %src[4:0] 010 %dest[4:0] 0110011
slt %dest, %src, zero

snez  %dest(register) , %src(register)
0000000 %src[4:0] 00000 011 %dest[4:0] 0110011
sltu %dest, zero, %src

s%width(store_funct3)  %src(register) , %offset:S64(immediate) ( %base(register) )
%offset[11:5] %src[4:0] %base[4:0] %width[2:0] %offset[4:0] 0100011
sb/sd/sh/sw %src, %offset(%base)

tail  %label(label)
%label_pcrel:S32 = %label - $start
%label_pcrel_hi:S20 = (%label_pcrel[31:12] + %label_pcrel[11:11]) & ((1 << 20) - 1)
%label_pcrel_lo:S12 = %label_pcrel[11:0]
%label_pcrel_hi[19:0] 00110 0010111 %label_pcrel_lo[11:0] 00110 000 00000 1100111
auipc t1, pcrel_hi(%label); jalr zero, pcrel_lo(%label)(t1)

zext.b  %dest(register) , %src(register)
000011111111 %src[4:0] 111 %dest[4:0] 0010011
andi %dest, %src, 0xff

zext.h  %dest(register) , %src(register)
000000 110000 %src[4:0] 001 %dest[4:0] 0010011 000000 110000 %dest[4:0] 101 %dest[4:0] 0010011
slli %dest, %src, (64 - 16); srli %dest, %dest, (64 - 16)

zext.w  %dest(register) , %src(register)
000000 100000 %src[4:0] 001 %dest[4:0] 0010011 000000 100000 %dest[4:0] 101 %dest[4:0] 0010011
slli %dest, %src, (64 - 32); srli %dest, %dest, (64 - 32)

%op(op_funct7_funct3)  %dest(register) , %src1(register) , %src2(register)
%op[9:3] %src2[4:0] %src1[4:0] %op[2:0] %dest[4:0] 0110011
add/and/or/sll/slt/sltu/sra/srl/sub/xor %dest, %src1, %src2

%op(op_32_funct7_funct3)  %dest(register) , %src1(register) , %src2(register)
%op[9:3] %src2[4:0] %src1[4:0] %op[2:0] %dest[4:0] 0111011
addw/sllw/sraw/srlw/subw %dest, %src1, %src2

%op(op_imm_funct3)  %dest(register) , %src(register) , %imm:S64(immediate)
%imm[11:0] %src[4:0] %op[2:0] %dest[4:0] 0010011
addi/andi/ori/slti/sltiu/xori %dest, %src, %imm

%op(op_imm_32_funct3)  %dest(register) , %src(register) , %imm:S64(immediate)
%imm[11:0] %src[4:0] %op[2:0] %dest[4:0] 0011011
addiw %dest, %src, %imm

%op(op_imm_shift_funct6_funct3)  %dest(register) , %src(register) , %imm:U6(immediate)
%op[8:3] %imm[5:0] %src[4:0] %op[2:0] %dest[4:0] 0010011
slli/srai/srli %dest, %src, %imm

%op(op_imm_32_shift_funct7_funct3)  %dest(register) , %src(register) , %imm:U5(immediate)
%op[9:3] %imm[4:0] %src[4:0] %op[2:0] %dest[4:0] 0011011
slliw/sraiw/srliw %dest, %src, %imm
